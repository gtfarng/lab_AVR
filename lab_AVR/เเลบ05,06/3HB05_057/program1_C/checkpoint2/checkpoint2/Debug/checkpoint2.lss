
checkpoint2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000016a  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .comment      00000030  00000000  00000000  000001be  2**0
                  CONTENTS, READONLY
  2 .debug_aranges 00000020  00000000  00000000  000001ee  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   000000d9  00000000  00000000  0000020e  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 0000008d  00000000  00000000  000002e7  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   000000e5  00000000  00000000  00000374  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000024  00000000  00000000  0000045c  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    00000150  00000000  00000000  00000480  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000013c  00000000  00000000  000005d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000010  00000000  00000000  0000070c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 39 00 	jmp	0x72	; 0x72 <__ctors_end>
   4:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
   8:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
   c:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  10:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  14:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  18:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  1c:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  20:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  24:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  28:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  2c:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  30:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  34:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  38:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  3c:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  40:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  44:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  48:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  4c:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  50:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  54:	8c 00       	.word	0x008c	; ????
  56:	aa 00       	.word	0x00aa	; ????
  58:	8e 00       	.word	0x008e	; ????
  5a:	90 00       	.word	0x0090	; ????
  5c:	92 00       	.word	0x0092	; ????
  5e:	94 00       	.word	0x0094	; ????
  60:	96 00       	.word	0x0096	; ????
  62:	98 00       	.word	0x0098	; ????
  64:	9a 00       	.word	0x009a	; ????
  66:	9c 00       	.word	0x009c	; ????
  68:	9e 00       	.word	0x009e	; ????
  6a:	a0 00       	.word	0x00a0	; ????
  6c:	a2 00       	.word	0x00a2	; ????
  6e:	a4 00       	.word	0x00a4	; ????
  70:	a6 00       	.word	0x00a6	; ????

00000072 <__ctors_end>:
  72:	11 24       	eor	r1, r1
  74:	1f be       	out	0x3f, r1	; 63
  76:	cf e5       	ldi	r28, 0x5F	; 95
  78:	d8 e0       	ldi	r29, 0x08	; 8
  7a:	de bf       	out	0x3e, r29	; 62
  7c:	cd bf       	out	0x3d, r28	; 61
  7e:	0e 94 45 00 	call	0x8a	; 0x8a <main>
  82:	0c 94 b3 00 	jmp	0x166	; 0x166 <_exit>

00000086 <__bad_interrupt>:
  86:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000008a <main>:


#include <avr/io.h>
int main(void)
{
	DDRD = 0x00; // set port D as input
  8a:	11 ba       	out	0x11, r1	; 17
	DDRC = 0xFF; // set port C as output
  8c:	8f ef       	ldi	r24, 0xFF	; 255
  8e:	84 bb       	out	0x14, r24	; 20
	unsigned char SWITCH_V, DISP, i, count, mask, test_bit;
	while (1)
	{
		//---read input switch via portB
		SWITCH_V = PIND;
  90:	c0 e0       	ldi	r28, 0x00	; 0
  92:	61 2c       	mov	r6, r1
		count = 0;
  94:	71 2c       	mov	r7, r1
		mask = 0x01;
		for (i=0;i<8;i++)
		{
			test_bit = SWITCH_V & (mask << i);
  96:	61 e0       	ldi	r22, 0x01	; 1
  98:	70 e0       	ldi	r23, 0x00	; 0
			case 10:DISP= 0b01110111; break;
			case 11:DISP= 0b01111100; break;
			case 12:DISP= 0b00111001; break;
			case 13:DISP= 0b01011110; break;
			case 14:DISP= 0b01111001; break;
			default:DISP= 0b01110001; //15
  9a:	0f 2e       	mov	r0, r31
  9c:	f1 e7       	ldi	r31, 0x71	; 113
  9e:	8f 2e       	mov	r8, r31
  a0:	f0 2d       	mov	r31, r0
			count++;
		}
		switch(count)
		{
			case 0: DISP= 0b00111111; break;
			case 1: DISP= 0b00000110; break;
  a2:	d6 e0       	ldi	r29, 0x06	; 6
			case 9: DISP= 0b01101111; break;
			case 10:DISP= 0b01110111; break;
			case 11:DISP= 0b01111100; break;
			case 12:DISP= 0b00111001; break;
			case 13:DISP= 0b01011110; break;
			case 14:DISP= 0b01111001; break;
  a4:	0f 2e       	mov	r0, r31
  a6:	f9 e7       	ldi	r31, 0x79	; 121
  a8:	9f 2e       	mov	r9, r31
  aa:	f0 2d       	mov	r31, r0
			case 6: DISP= 0b01111101; break;
			case 7: DISP= 0b00000111; break;
			case 8: DISP= 0b01111111; break;
			case 9: DISP= 0b01101111; break;
			case 10:DISP= 0b01110111; break;
			case 11:DISP= 0b01111100; break;
  ac:	0f 2e       	mov	r0, r31
  ae:	fc e7       	ldi	r31, 0x7C	; 124
  b0:	af 2e       	mov	r10, r31
  b2:	f0 2d       	mov	r31, r0
			case 5: DISP= 0b01101101; break;
			case 6: DISP= 0b01111101; break;
			case 7: DISP= 0b00000111; break;
			case 8: DISP= 0b01111111; break;
			case 9: DISP= 0b01101111; break;
			case 10:DISP= 0b01110111; break;
  b4:	0f 2e       	mov	r0, r31
  b6:	f7 e7       	ldi	r31, 0x77	; 119
  b8:	bf 2e       	mov	r11, r31
  ba:	f0 2d       	mov	r31, r0
			case 4: DISP= 0b01100110; break;
			case 5: DISP= 0b01101101; break;
			case 6: DISP= 0b01111101; break;
			case 7: DISP= 0b00000111; break;
			case 8: DISP= 0b01111111; break;
			case 9: DISP= 0b01101111; break;
  bc:	0f 2e       	mov	r0, r31
  be:	ff e6       	ldi	r31, 0x6F	; 111
  c0:	cf 2e       	mov	r12, r31
  c2:	f0 2d       	mov	r31, r0
			case 3: DISP= 0b01001111; break;
			case 4: DISP= 0b01100110; break;
			case 5: DISP= 0b01101101; break;
			case 6: DISP= 0b01111101; break;
			case 7: DISP= 0b00000111; break;
			case 8: DISP= 0b01111111; break;
  c4:	0f 2e       	mov	r0, r31
  c6:	ff e7       	ldi	r31, 0x7F	; 127
  c8:	df 2e       	mov	r13, r31
  ca:	f0 2d       	mov	r31, r0
			case 2: DISP= 0b01011011; break;
			case 3: DISP= 0b01001111; break;
			case 4: DISP= 0b01100110; break;
			case 5: DISP= 0b01101101; break;
			case 6: DISP= 0b01111101; break;
			case 7: DISP= 0b00000111; break;
  cc:	0f 2e       	mov	r0, r31
  ce:	f7 e0       	ldi	r31, 0x07	; 7
  d0:	ef 2e       	mov	r14, r31
  d2:	f0 2d       	mov	r31, r0
			case 1: DISP= 0b00000110; break;
			case 2: DISP= 0b01011011; break;
			case 3: DISP= 0b01001111; break;
			case 4: DISP= 0b01100110; break;
			case 5: DISP= 0b01101101; break;
			case 6: DISP= 0b01111101; break;
  d4:	0f 2e       	mov	r0, r31
  d6:	fd e7       	ldi	r31, 0x7D	; 125
  d8:	ff 2e       	mov	r15, r31
  da:	f0 2d       	mov	r31, r0
			case 0: DISP= 0b00111111; break;
			case 1: DISP= 0b00000110; break;
			case 2: DISP= 0b01011011; break;
			case 3: DISP= 0b01001111; break;
			case 4: DISP= 0b01100110; break;
			case 5: DISP= 0b01101101; break;
  dc:	0d e6       	ldi	r16, 0x6D	; 109
		{
			case 0: DISP= 0b00111111; break;
			case 1: DISP= 0b00000110; break;
			case 2: DISP= 0b01011011; break;
			case 3: DISP= 0b01001111; break;
			case 4: DISP= 0b01100110; break;
  de:	16 e6       	ldi	r17, 0x66	; 102
	DDRC = 0xFF; // set port C as output
	unsigned char SWITCH_V, DISP, i, count, mask, test_bit;
	while (1)
	{
		//---read input switch via portB
		SWITCH_V = PIND;
  e0:	90 b3       	in	r25, 0x10	; 16
  e2:	2c 2f       	mov	r18, r28
  e4:	36 2d       	mov	r19, r6
		count = 0;
  e6:	87 2d       	mov	r24, r7
		mask = 0x01;
		for (i=0;i<8;i++)
		{
			test_bit = SWITCH_V & (mask << i);
  e8:	ab 01       	movw	r20, r22
  ea:	02 2e       	mov	r0, r18
  ec:	02 c0       	rjmp	.+4      	; 0xf2 <main+0x68>
  ee:	44 0f       	add	r20, r20
  f0:	55 1f       	adc	r21, r21
  f2:	0a 94       	dec	r0
  f4:	e2 f7       	brpl	.-8      	; 0xee <main+0x64>
  f6:	49 23       	and	r20, r25
			if (test_bit)
  f8:	09 f0       	breq	.+2      	; 0xfc <main+0x72>
			count++;
  fa:	8f 5f       	subi	r24, 0xFF	; 255
  fc:	2f 5f       	subi	r18, 0xFF	; 255
  fe:	3f 4f       	sbci	r19, 0xFF	; 255
	{
		//---read input switch via portB
		SWITCH_V = PIND;
		count = 0;
		mask = 0x01;
		for (i=0;i<8;i++)
 100:	28 30       	cpi	r18, 0x08	; 8
 102:	31 05       	cpc	r19, r1
 104:	89 f7       	brne	.-30     	; 0xe8 <main+0x5e>
		{
			test_bit = SWITCH_V & (mask << i);
			if (test_bit)
			count++;
		}
		switch(count)
 106:	90 e0       	ldi	r25, 0x00	; 0
 108:	8f 30       	cpi	r24, 0x0F	; 15
 10a:	91 05       	cpc	r25, r1
 10c:	08 f5       	brcc	.+66     	; 0x150 <main+0xc6>
 10e:	86 5d       	subi	r24, 0xD6	; 214
 110:	9f 4f       	sbci	r25, 0xFF	; 255
 112:	fc 01       	movw	r30, r24
 114:	0c 94 ad 00 	jmp	0x15a	; 0x15a <__tablejump2__>
		{
			case 0: DISP= 0b00111111; break;
 118:	8f e3       	ldi	r24, 0x3F	; 63
 11a:	1d c0       	rjmp	.+58     	; 0x156 <main+0xcc>
			case 1: DISP= 0b00000110; break;
			case 2: DISP= 0b01011011; break;
 11c:	8b e5       	ldi	r24, 0x5B	; 91
 11e:	1b c0       	rjmp	.+54     	; 0x156 <main+0xcc>
			case 3: DISP= 0b01001111; break;
 120:	8f e4       	ldi	r24, 0x4F	; 79
 122:	19 c0       	rjmp	.+50     	; 0x156 <main+0xcc>
			case 4: DISP= 0b01100110; break;
 124:	81 2f       	mov	r24, r17
 126:	17 c0       	rjmp	.+46     	; 0x156 <main+0xcc>
			case 5: DISP= 0b01101101; break;
 128:	80 2f       	mov	r24, r16
 12a:	15 c0       	rjmp	.+42     	; 0x156 <main+0xcc>
			case 6: DISP= 0b01111101; break;
 12c:	8f 2d       	mov	r24, r15
 12e:	13 c0       	rjmp	.+38     	; 0x156 <main+0xcc>
			case 7: DISP= 0b00000111; break;
 130:	8e 2d       	mov	r24, r14
 132:	11 c0       	rjmp	.+34     	; 0x156 <main+0xcc>
			case 8: DISP= 0b01111111; break;
 134:	8d 2d       	mov	r24, r13
 136:	0f c0       	rjmp	.+30     	; 0x156 <main+0xcc>
			case 9: DISP= 0b01101111; break;
 138:	8c 2d       	mov	r24, r12
 13a:	0d c0       	rjmp	.+26     	; 0x156 <main+0xcc>
			case 10:DISP= 0b01110111; break;
 13c:	8b 2d       	mov	r24, r11
 13e:	0b c0       	rjmp	.+22     	; 0x156 <main+0xcc>
			case 11:DISP= 0b01111100; break;
 140:	8a 2d       	mov	r24, r10
 142:	09 c0       	rjmp	.+18     	; 0x156 <main+0xcc>
			case 12:DISP= 0b00111001; break;
 144:	89 e3       	ldi	r24, 0x39	; 57
 146:	07 c0       	rjmp	.+14     	; 0x156 <main+0xcc>
			case 13:DISP= 0b01011110; break;
 148:	8e e5       	ldi	r24, 0x5E	; 94
 14a:	05 c0       	rjmp	.+10     	; 0x156 <main+0xcc>
			case 14:DISP= 0b01111001; break;
 14c:	89 2d       	mov	r24, r9
 14e:	03 c0       	rjmp	.+6      	; 0x156 <main+0xcc>
			default:DISP= 0b01110001; //15
 150:	88 2d       	mov	r24, r8
 152:	01 c0       	rjmp	.+2      	; 0x156 <main+0xcc>
			count++;
		}
		switch(count)
		{
			case 0: DISP= 0b00111111; break;
			case 1: DISP= 0b00000110; break;
 154:	8d 2f       	mov	r24, r29
			case 12:DISP= 0b00111001; break;
			case 13:DISP= 0b01011110; break;
			case 14:DISP= 0b01111001; break;
			default:DISP= 0b01110001; //15
		}
		PORTC = DISP;
 156:	85 bb       	out	0x15, r24	; 21
	}
 158:	c3 cf       	rjmp	.-122    	; 0xe0 <main+0x56>

0000015a <__tablejump2__>:
 15a:	ee 0f       	add	r30, r30
 15c:	ff 1f       	adc	r31, r31

0000015e <__tablejump__>:
 15e:	05 90       	lpm	r0, Z+
 160:	f4 91       	lpm	r31, Z
 162:	e0 2d       	mov	r30, r0
 164:	09 94       	ijmp

00000166 <_exit>:
 166:	f8 94       	cli

00000168 <__stop_program>:
 168:	ff cf       	rjmp	.-2      	; 0x168 <__stop_program>
